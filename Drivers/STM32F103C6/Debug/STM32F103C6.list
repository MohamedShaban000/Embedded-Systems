
STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e14  08000e14  00010e1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e14  08000e14  00010e1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e14  08000e1c  00010e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000e1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000e1c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000165e  00000000  00000000  00010e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006bd  00000000  00000000  000124a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000ba8  00000000  00000000  00012b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00013708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a0  00000000  00000000  00013900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000117b  00000000  00000000  00013aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000271e  00000000  00000000  00014c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c28  00000000  00000000  00017339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00020f61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000638  00000000  00000000  00020fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ddc 	.word	0x08000ddc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ddc 	.word	0x08000ddc

08000170 <delay_ms>:
 *  Author: 
 */

#include "lcd.h"

void delay_ms(uint32 time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32 i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);			;
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_GPIO_init>:
static GPIO_PinConfig_t PinCfg ;
void LCD_GPIO_init() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PINNumber = RS_SWITCH;
 80001b0:	4b4f      	ldr	r3, [pc, #316]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001b2:	2208      	movs	r2, #8
 80001b4:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 80001b6:	4b4e      	ldr	r3, [pc, #312]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001b8:	2204      	movs	r2, #4
 80001ba:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 80001bc:	4b4c      	ldr	r3, [pc, #304]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001be:	2201      	movs	r2, #1
 80001c0:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 80001c2:	494b      	ldr	r1, [pc, #300]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001c4:	484b      	ldr	r0, [pc, #300]	; (80002f4 <LCD_GPIO_init+0x148>)
 80001c6:	f000 fc8b 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = RW_SWITCH;
 80001ca:	4b49      	ldr	r3, [pc, #292]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001cc:	2209      	movs	r2, #9
 80001ce:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 80001d0:	4b47      	ldr	r3, [pc, #284]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 80001d6:	4b46      	ldr	r3, [pc, #280]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001d8:	2201      	movs	r2, #1
 80001da:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 80001dc:	4944      	ldr	r1, [pc, #272]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001de:	4845      	ldr	r0, [pc, #276]	; (80002f4 <LCD_GPIO_init+0x148>)
 80001e0:	f000 fc7e 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = EN_SWITCH;
 80001e4:	4b42      	ldr	r3, [pc, #264]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001e6:	220a      	movs	r2, #10
 80001e8:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 80001ea:	4b41      	ldr	r3, [pc, #260]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001ec:	2204      	movs	r2, #4
 80001ee:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 80001f0:	4b3f      	ldr	r3, [pc, #252]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 80001f6:	493e      	ldr	r1, [pc, #248]	; (80002f0 <LCD_GPIO_init+0x144>)
 80001f8:	483e      	ldr	r0, [pc, #248]	; (80002f4 <LCD_GPIO_init+0x148>)
 80001fa:	f000 fc71 	bl	8000ae0 <MCAL_GPIO_init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PINNumber = GPIO_PIN0;
 80001fe:	4b3c      	ldr	r3, [pc, #240]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000204:	4b3a      	ldr	r3, [pc, #232]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000206:	2204      	movs	r2, #4
 8000208:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 800020a:	4b39      	ldr	r3, [pc, #228]	; (80002f0 <LCD_GPIO_init+0x144>)
 800020c:	2201      	movs	r2, #1
 800020e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 8000210:	4937      	ldr	r1, [pc, #220]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000212:	4838      	ldr	r0, [pc, #224]	; (80002f4 <LCD_GPIO_init+0x148>)
 8000214:	f000 fc64 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN1;
 8000218:	4b35      	ldr	r3, [pc, #212]	; (80002f0 <LCD_GPIO_init+0x144>)
 800021a:	2201      	movs	r2, #1
 800021c:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 800021e:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000220:	2204      	movs	r2, #4
 8000222:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 8000224:	4b32      	ldr	r3, [pc, #200]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000226:	2201      	movs	r2, #1
 8000228:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 800022a:	4931      	ldr	r1, [pc, #196]	; (80002f0 <LCD_GPIO_init+0x144>)
 800022c:	4831      	ldr	r0, [pc, #196]	; (80002f4 <LCD_GPIO_init+0x148>)
 800022e:	f000 fc57 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN2;
 8000232:	4b2f      	ldr	r3, [pc, #188]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000234:	2202      	movs	r2, #2
 8000236:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000238:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <LCD_GPIO_init+0x144>)
 800023a:	2204      	movs	r2, #4
 800023c:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 800023e:	4b2c      	ldr	r3, [pc, #176]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000240:	2201      	movs	r2, #1
 8000242:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 8000244:	492a      	ldr	r1, [pc, #168]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000246:	482b      	ldr	r0, [pc, #172]	; (80002f4 <LCD_GPIO_init+0x148>)
 8000248:	f000 fc4a 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN3;
 800024c:	4b28      	ldr	r3, [pc, #160]	; (80002f0 <LCD_GPIO_init+0x144>)
 800024e:	2203      	movs	r2, #3
 8000250:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000252:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000254:	2204      	movs	r2, #4
 8000256:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 8000258:	4b25      	ldr	r3, [pc, #148]	; (80002f0 <LCD_GPIO_init+0x144>)
 800025a:	2201      	movs	r2, #1
 800025c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 800025e:	4924      	ldr	r1, [pc, #144]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000260:	4824      	ldr	r0, [pc, #144]	; (80002f4 <LCD_GPIO_init+0x148>)
 8000262:	f000 fc3d 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN4;
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000268:	2204      	movs	r2, #4
 800026a:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 800026c:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <LCD_GPIO_init+0x144>)
 800026e:	2204      	movs	r2, #4
 8000270:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 8000272:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000274:	2201      	movs	r2, #1
 8000276:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 8000278:	491d      	ldr	r1, [pc, #116]	; (80002f0 <LCD_GPIO_init+0x144>)
 800027a:	481e      	ldr	r0, [pc, #120]	; (80002f4 <LCD_GPIO_init+0x148>)
 800027c:	f000 fc30 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN5;
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000282:	2205      	movs	r2, #5
 8000284:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000288:	2204      	movs	r2, #4
 800028a:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <LCD_GPIO_init+0x144>)
 800028e:	2201      	movs	r2, #1
 8000290:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <LCD_GPIO_init+0x144>)
 8000294:	4817      	ldr	r0, [pc, #92]	; (80002f4 <LCD_GPIO_init+0x148>)
 8000296:	f000 fc23 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN6;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <LCD_GPIO_init+0x144>)
 800029c:	2206      	movs	r2, #6
 800029e:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002a2:	2204      	movs	r2, #4
 80002a4:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 80002ac:	4910      	ldr	r1, [pc, #64]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002ae:	4811      	ldr	r0, [pc, #68]	; (80002f4 <LCD_GPIO_init+0x148>)
 80002b0:	f000 fc16 	bl	8000ae0 <MCAL_GPIO_init>

	PinCfg.GPIO_PINNumber = GPIO_PIN7;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002b6:	2207      	movs	r2, #7
 80002b8:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 80002ba:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002bc:	2204      	movs	r2, #4
 80002be:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Speed = GPIO_Speed_10MHZ;
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init(LCD_CTRL, &PinCfg);
 80002c6:	490a      	ldr	r1, [pc, #40]	; (80002f0 <LCD_GPIO_init+0x144>)
 80002c8:	480a      	ldr	r0, [pc, #40]	; (80002f4 <LCD_GPIO_init+0x148>)
 80002ca:	f000 fc09 	bl	8000ae0 <MCAL_GPIO_init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_LOW);
 80002ce:	2200      	movs	r2, #0
 80002d0:	210a      	movs	r1, #10
 80002d2:	4808      	ldr	r0, [pc, #32]	; (80002f4 <LCD_GPIO_init+0x148>)
 80002d4:	f000 fc8a 	bl	8000bec <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_LOW);
 80002d8:	2200      	movs	r2, #0
 80002da:	2108      	movs	r1, #8
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <LCD_GPIO_init+0x148>)
 80002de:	f000 fc85 	bl	8000bec <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2109      	movs	r1, #9
 80002e6:	4803      	ldr	r0, [pc, #12]	; (80002f4 <LCD_GPIO_init+0x148>)
 80002e8:	f000 fc80 	bl	8000bec <MCAL_GPIO_WritePIN>

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	40010800 	.word	0x40010800

080002f8 <LCD_clear_screen>:

void LCD_clear_screen() {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 f855 	bl	80003ac <LCD_WRITE_COMMAND>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_HIGH);
 800030c:	2201      	movs	r2, #1
 800030e:	210a      	movs	r1, #10
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <LCD_lcd_kick+0x24>)
 8000312:	f000 fc6b 	bl	8000bec <MCAL_GPIO_WritePIN>
	delay_ms(50);
 8000316:	2032      	movs	r0, #50	; 0x32
 8000318:	f7ff ff2a 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_LOW);
 800031c:	2200      	movs	r2, #0
 800031e:	210a      	movs	r1, #10
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <LCD_lcd_kick+0x24>)
 8000322:	f000 fc63 	bl	8000bec <MCAL_GPIO_WritePIN>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010800 	.word	0x40010800

08000330 <LCD_GOTO_XY>:

void LCD_GOTO_XY(uint8 line, uint8 position) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	460a      	mov	r2, r1
 800033a:	71fb      	strb	r3, [r7, #7]
 800033c:	4613      	mov	r3, r2
 800033e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d108      	bne.n	8000358 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	d805      	bhi.n	8000358 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	3b80      	subs	r3, #128	; 0x80
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f82a 	bl	80003ac <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d108      	bne.n	8000370 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	2b0f      	cmp	r3, #15
 8000362:	d805      	bhi.n	8000370 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	3b40      	subs	r3, #64	; 0x40
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f81e 	bl	80003ac <LCD_WRITE_COMMAND>
		}
	}
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <LCD_INIT>:

void LCD_INIT() {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

	delay_ms (20);
 800037c:	2014      	movs	r0, #20
 800037e:	f7ff fef7 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000382:	f7ff ff13 	bl	80001ac <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000386:	200f      	movs	r0, #15
 8000388:	f7ff fef2 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 800038c:	f7ff ffb4 	bl	80002f8 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000390:	2038      	movs	r0, #56	; 0x38
 8000392:	f000 f80b 	bl	80003ac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000396:	2006      	movs	r0, #6
 8000398:	f000 f808 	bl	80003ac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800039c:	2080      	movs	r0, #128	; 0x80
 800039e:	f000 f805 	bl	80003ac <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003a2:	200f      	movs	r0, #15
 80003a4:	f000 f802 	bl	80003ac <LCD_WRITE_COMMAND>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}

080003ac <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(uint8 command) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	4619      	mov	r1, r3
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <LCD_WRITE_COMMAND+0x3c>)
 80003be:	f000 fc39 	bl	8000c34 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2109      	movs	r1, #9
 80003c6:	4808      	ldr	r0, [pc, #32]	; (80003e8 <LCD_WRITE_COMMAND+0x3c>)
 80003c8:	f000 fc10 	bl	8000bec <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_LOW);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <LCD_WRITE_COMMAND+0x3c>)
 80003d2:	f000 fc0b 	bl	8000bec <MCAL_GPIO_WritePIN>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff feca 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003dc:	f7ff ff94 	bl	8000308 <LCD_lcd_kick>

}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40010800 	.word	0x40010800

080003ec <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(uint8 character) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	480a      	ldr	r0, [pc, #40]	; (8000428 <LCD_WRITE_CHAR+0x3c>)
 80003fe:	f000 fc19 	bl	8000c34 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_LOW);
 8000402:	2200      	movs	r2, #0
 8000404:	2109      	movs	r1, #9
 8000406:	4808      	ldr	r0, [pc, #32]	; (8000428 <LCD_WRITE_CHAR+0x3c>)
 8000408:	f000 fbf0 	bl	8000bec <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_HIGH);
 800040c:	2201      	movs	r2, #1
 800040e:	2108      	movs	r1, #8
 8000410:	4805      	ldr	r0, [pc, #20]	; (8000428 <LCD_WRITE_CHAR+0x3c>)
 8000412:	f000 fbeb 	bl	8000bec <MCAL_GPIO_WritePIN>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff feaa 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 800041c:	f7ff ff74 	bl	8000308 <LCD_lcd_kick>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40010800 	.word	0x40010800

0800042c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000438:	e01c      	b.n	8000474 <LCD_WRITE_STRING+0x48>
		count++;
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3301      	adds	r3, #1
 800043e:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	607a      	str	r2, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ffcf 	bl	80003ec <LCD_WRITE_CHAR>
		if (count == 16) {
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	2b10      	cmp	r3, #16
 8000452:	d104      	bne.n	800045e <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000454:	2100      	movs	r1, #0
 8000456:	2002      	movs	r0, #2
 8000458:	f7ff ff6a 	bl	8000330 <LCD_GOTO_XY>
 800045c:	e00a      	b.n	8000474 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2b20      	cmp	r3, #32
 8000462:	d107      	bne.n	8000474 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000464:	f7ff ff48 	bl	80002f8 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000468:	2100      	movs	r1, #0
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff ff60 	bl	8000330 <LCD_GOTO_XY>
			count = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1de      	bne.n	800043a <LCD_WRITE_STRING+0xe>
		}
	}
}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <NVIC_Enable>:
						              (x==GPIOD)?3:0 )

//Generic Functions

void NVIC_Enable(uint8 EXTI_LINE)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	switch(EXTI_LINE)
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d854      	bhi.n	8000542 <NVIC_Enable+0xba>
 8000498:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <NVIC_Enable+0x18>)
 800049a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049e:	bf00      	nop
 80004a0:	080004e1 	.word	0x080004e1
 80004a4:	080004ef 	.word	0x080004ef
 80004a8:	080004fd 	.word	0x080004fd
 80004ac:	0800050b 	.word	0x0800050b
 80004b0:	08000519 	.word	0x08000519
 80004b4:	08000527 	.word	0x08000527
 80004b8:	08000527 	.word	0x08000527
 80004bc:	08000527 	.word	0x08000527
 80004c0:	08000527 	.word	0x08000527
 80004c4:	08000527 	.word	0x08000527
 80004c8:	08000535 	.word	0x08000535
 80004cc:	08000535 	.word	0x08000535
 80004d0:	08000535 	.word	0x08000535
 80004d4:	08000535 	.word	0x08000535
 80004d8:	08000535 	.word	0x08000535
 80004dc:	08000535 	.word	0x08000535
	{
	case 0:
		NVIC_EXTI0_IRQ_EN();
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <NVIC_Enable+0xc4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a19      	ldr	r2, [pc, #100]	; (800054c <NVIC_Enable+0xc4>)
 80004e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ea:	6013      	str	r3, [r2, #0]
		break;
 80004ec:	e029      	b.n	8000542 <NVIC_Enable+0xba>
	case 1:
		NVIC_EXTI1_IRQ_EN();
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <NVIC_Enable+0xc4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <NVIC_Enable+0xc4>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	6013      	str	r3, [r2, #0]
		break;
 80004fa:	e022      	b.n	8000542 <NVIC_Enable+0xba>
	case 2:
		NVIC_EXTI2_IRQ_EN();
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <NVIC_Enable+0xc4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <NVIC_Enable+0xc4>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
		break;
 8000508:	e01b      	b.n	8000542 <NVIC_Enable+0xba>
	case 3:
		NVIC_EXTI3_IRQ_EN();
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <NVIC_Enable+0xc4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <NVIC_Enable+0xc4>)
 8000510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000514:	6013      	str	r3, [r2, #0]
		break;
 8000516:	e014      	b.n	8000542 <NVIC_Enable+0xba>
	case 4:
		NVIC_EXTI4_IRQ_EN();
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <NVIC_Enable+0xc4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <NVIC_Enable+0xc4>)
 800051e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000522:	6013      	str	r3, [r2, #0]
		break;
 8000524:	e00d      	b.n	8000542 <NVIC_Enable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_5_IRQ_EN();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <NVIC_Enable+0xc4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a08      	ldr	r2, [pc, #32]	; (800054c <NVIC_Enable+0xc4>)
 800052c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000530:	6013      	str	r3, [r2, #0]
		break;
 8000532:	e006      	b.n	8000542 <NVIC_Enable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_10IRQ_EN();
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <NVIC_Enable+0xc8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <NVIC_Enable+0xc8>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6013      	str	r3, [r2, #0]
		break;
 8000540:	bf00      	nop
	}

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	e000e100 	.word	0xe000e100
 8000550:	e000e104 	.word	0xe000e104

08000554 <NVIC_Disable>:

void NVIC_Disable(uint8 EXTI_LINE)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	switch(EXTI_LINE)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d854      	bhi.n	800060e <NVIC_Disable+0xba>
 8000564:	a201      	add	r2, pc, #4	; (adr r2, 800056c <NVIC_Disable+0x18>)
 8000566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056a:	bf00      	nop
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	080005c9 	.word	0x080005c9
 8000578:	080005d7 	.word	0x080005d7
 800057c:	080005e5 	.word	0x080005e5
 8000580:	080005f3 	.word	0x080005f3
 8000584:	080005f3 	.word	0x080005f3
 8000588:	080005f3 	.word	0x080005f3
 800058c:	080005f3 	.word	0x080005f3
 8000590:	080005f3 	.word	0x080005f3
 8000594:	08000601 	.word	0x08000601
 8000598:	08000601 	.word	0x08000601
 800059c:	08000601 	.word	0x08000601
 80005a0:	08000601 	.word	0x08000601
 80005a4:	08000601 	.word	0x08000601
 80005a8:	08000601 	.word	0x08000601
	{
	case 0:
		NVIC_EXTI0_IRQ_Disable();
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <NVIC_Disable+0xc4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a19      	ldr	r2, [pc, #100]	; (8000618 <NVIC_Disable+0xc4>)
 80005b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b6:	6013      	str	r3, [r2, #0]
		break;
 80005b8:	e029      	b.n	800060e <NVIC_Disable+0xba>
	case 1:
		NVIC_EXTI1_IRQ_Disable();
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <NVIC_Disable+0xc4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <NVIC_Disable+0xc4>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6013      	str	r3, [r2, #0]
		break;
 80005c6:	e022      	b.n	800060e <NVIC_Disable+0xba>
	case 2:
		NVIC_EXTI2_IRQ_Disable();
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <NVIC_Disable+0xc4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <NVIC_Disable+0xc4>)
 80005ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d2:	6013      	str	r3, [r2, #0]
		break;
 80005d4:	e01b      	b.n	800060e <NVIC_Disable+0xba>
	case 3:
		NVIC_EXTI3_IRQ_Disable();
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <NVIC_Disable+0xc4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <NVIC_Disable+0xc4>)
 80005dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e0:	6013      	str	r3, [r2, #0]
		break;
 80005e2:	e014      	b.n	800060e <NVIC_Disable+0xba>
	case 4:
		NVIC_EXTI4_IRQ_Disable();
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <NVIC_Disable+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <NVIC_Disable+0xc4>)
 80005ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ee:	6013      	str	r3, [r2, #0]
		break;
 80005f0:	e00d      	b.n	800060e <NVIC_Disable+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_5_IRQ_Disable();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <NVIC_Disable+0xc4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <NVIC_Disable+0xc4>)
 80005f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005fc:	6013      	str	r3, [r2, #0]
		break;
 80005fe:	e006      	b.n	800060e <NVIC_Disable+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_10IRQ_Disable();
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <NVIC_Disable+0xc8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a05      	ldr	r2, [pc, #20]	; (800061c <NVIC_Disable+0xc8>)
 8000606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060a:	6013      	str	r3, [r2, #0]
		break;
 800060c:	bf00      	nop
	}
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	e000e180 	.word	0xe000e180
 800061c:	e000e184 	.word	0xe000e184

08000620 <EXTI_Update>:

void EXTI_Update(EXTI_PinConfig_t* EXTI_pinCFG)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	//Adjust pin to be input floating
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PINNumber=EXTI_pinCFG->EXTI_Pin.pinNum;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7a1b      	ldrb	r3, [r3, #8]
 800062c:	723b      	strb	r3, [r7, #8]
	pinCfg.GPIO_Mode=GPIO_Mode_AF_IN;
 800062e:	2308      	movs	r3, #8
 8000630:	727b      	strb	r3, [r7, #9]
	MCAL_GPIO_init( EXTI_pinCFG->EXTI_Pin.GPIOx,&pinCfg);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f107 0208 	add.w	r2, r7, #8
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fa4f 	bl	8000ae0 <MCAL_GPIO_init>
	//Mapping GPIO PIN to external interrupt line
	uint8 AFIO_reg_index = EXTI_pinCFG->EXTI_Pin.EXTI_Line/4;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	73fb      	strb	r3, [r7, #15]
	uint8 AFIO_bit_pos = 4*(EXTI_pinCFG->EXTI_Pin.EXTI_Line % 4);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_reg_index] &= ~(0XF<<AFIO_bit_pos);
 8000658:	4a61      	ldr	r2, [pc, #388]	; (80007e0 <EXTI_Update+0x1c0>)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	3302      	adds	r3, #2
 800065e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	210f      	movs	r1, #15
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	495c      	ldr	r1, [pc, #368]	; (80007e0 <EXTI_Update+0x1c0>)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	4002      	ands	r2, r0
 8000674:	3302      	adds	r3, #2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_reg_index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_pinCFG->EXTI_Pin.GPIOx)<<AFIO_bit_pos);
 800067a:	4a59      	ldr	r2, [pc, #356]	; (80007e0 <EXTI_Update+0x1c0>)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3302      	adds	r3, #2
 8000680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4956      	ldr	r1, [pc, #344]	; (80007e4 <EXTI_Update+0x1c4>)
 800068a:	428b      	cmp	r3, r1
 800068c:	d016      	beq.n	80006bc <EXTI_Update+0x9c>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	4955      	ldr	r1, [pc, #340]	; (80007e8 <EXTI_Update+0x1c8>)
 8000694:	428b      	cmp	r3, r1
 8000696:	d00f      	beq.n	80006b8 <EXTI_Update+0x98>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4953      	ldr	r1, [pc, #332]	; (80007ec <EXTI_Update+0x1cc>)
 800069e:	428b      	cmp	r3, r1
 80006a0:	d008      	beq.n	80006b4 <EXTI_Update+0x94>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4952      	ldr	r1, [pc, #328]	; (80007f0 <EXTI_Update+0x1d0>)
 80006a8:	428b      	cmp	r3, r1
 80006aa:	d101      	bne.n	80006b0 <EXTI_Update+0x90>
 80006ac:	2303      	movs	r3, #3
 80006ae:	e006      	b.n	80006be <EXTI_Update+0x9e>
 80006b0:	2300      	movs	r3, #0
 80006b2:	e004      	b.n	80006be <EXTI_Update+0x9e>
 80006b4:	2302      	movs	r3, #2
 80006b6:	e002      	b.n	80006be <EXTI_Update+0x9e>
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <EXTI_Update+0x9e>
 80006bc:	2300      	movs	r3, #0
 80006be:	7bb9      	ldrb	r1, [r7, #14]
 80006c0:	408b      	lsls	r3, r1
 80006c2:	4618      	mov	r0, r3
 80006c4:	4946      	ldr	r1, [pc, #280]	; (80007e0 <EXTI_Update+0x1c0>)
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4302      	orrs	r2, r0
 80006ca:	3302      	adds	r3, #2
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Adjust the edge trigger for the interrupt
	EXTI->FTSR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 80006d0:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <EXTI_Update+0x1d4>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	43d2      	mvns	r2, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a44      	ldr	r2, [pc, #272]	; (80007f4 <EXTI_Update+0x1d4>)
 80006e4:	400b      	ands	r3, r1
 80006e6:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 80006e8:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <EXTI_Update+0x1d4>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	408a      	lsls	r2, r1
 80006f6:	43d2      	mvns	r2, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a3e      	ldr	r2, [pc, #248]	; (80007f4 <EXTI_Update+0x1d4>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	6093      	str	r3, [r2, #8]
	if(EXTI_pinCFG->triggerState == triggerState_Falling)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b1b      	ldrb	r3, [r3, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10b      	bne.n	8000720 <EXTI_Update+0x100>
	{
		EXTI->FTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <EXTI_Update+0x1d4>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	4611      	mov	r1, r2
 8000712:	2201      	movs	r2, #1
 8000714:	408a      	lsls	r2, r1
 8000716:	4611      	mov	r1, r2
 8000718:	4a36      	ldr	r2, [pc, #216]	; (80007f4 <EXTI_Update+0x1d4>)
 800071a:	430b      	orrs	r3, r1
 800071c:	60d3      	str	r3, [r2, #12]
 800071e:	e029      	b.n	8000774 <EXTI_Update+0x154>
	}
	else if(EXTI_pinCFG->triggerState == triggerState_Rising)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7b1b      	ldrb	r3, [r3, #12]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10b      	bne.n	8000740 <EXTI_Update+0x120>
	{
		EXTI->RTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <EXTI_Update+0x1d4>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	4611      	mov	r1, r2
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <EXTI_Update+0x1d4>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6093      	str	r3, [r2, #8]
 800073e:	e019      	b.n	8000774 <EXTI_Update+0x154>
	}
	else if(EXTI_pinCFG->triggerState == triggerState_Rising_Falling)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7b1b      	ldrb	r3, [r3, #12]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d115      	bne.n	8000774 <EXTI_Update+0x154>
	{
		EXTI->FTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <EXTI_Update+0x1d4>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <EXTI_Update+0x1d4>)
 800075a:	430b      	orrs	r3, r1
 800075c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <EXTI_Update+0x1d4>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <EXTI_Update+0x1d4>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6093      	str	r3, [r2, #8]
	}
	//Put the IRQ Pointer to the application interrupt function
	gp_IRQ_CallBack[EXTI_pinCFG->EXTI_Pin.EXTI_Line] = EXTI_pinCFG->ptr_IRQ_CallBack;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <EXTI_Update+0x1d8>)
 8000780:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//Enable or disable IRQ and NVIC
	if(EXTI_pinCFG->EXTI_State == EXTI_Enable)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b5b      	ldrb	r3, [r3, #13]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d110      	bne.n	80007ae <EXTI_Update+0x18e>
	{
		EXTI->IMR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <EXTI_Update+0x1d4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	2201      	movs	r2, #1
 8000798:	408a      	lsls	r2, r1
 800079a:	4611      	mov	r1, r2
 800079c:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <EXTI_Update+0x1d4>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe6e 	bl	8000488 <NVIC_Enable>
	else if(EXTI_pinCFG->EXTI_State == EXTI_Disable)
	{
		EXTI->IMR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
		NVIC_Disable(EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	}
}
 80007ac:	e014      	b.n	80007d8 <EXTI_Update+0x1b8>
	else if(EXTI_pinCFG->EXTI_State == EXTI_Disable)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7b5b      	ldrb	r3, [r3, #13]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d110      	bne.n	80007d8 <EXTI_Update+0x1b8>
		EXTI->IMR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <EXTI_Update+0x1d4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	408a      	lsls	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <EXTI_Update+0x1d4>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_pinCFG->EXTI_Pin.EXTI_Line);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff febe 	bl	8000554 <NVIC_Disable>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40010000 	.word	0x40010000
 80007e4:	40010800 	.word	0x40010800
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	40011000 	.word	0x40011000
 80007f0:	40011400 	.word	0x40011400
 80007f4:	40010400 	.word	0x40010400
 80007f8:	20000020 	.word	0x20000020

080007fc <MCAL_EXTI_Init>:
 * @param [in] 	-pinCFG :pointer to the configuration structure
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_EXTI_Init(EXTI_PinConfig_t* EXTI_pinCFG)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	EXTI_Update(EXTI_pinCFG);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff0b 	bl	8000620 <EXTI_Update>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <EXTI0_IRQHandler+0x1c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <EXTI0_IRQHandler+0x1c>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6153      	str	r3, [r2, #20]
	gp_IRQ_CallBack[0]();
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <EXTI0_IRQHandler+0x20>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4798      	blx	r3
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010400 	.word	0x40010400
 8000834:	20000020 	.word	0x20000020

08000838 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <EXTI1_IRQHandler+0x1c>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <EXTI1_IRQHandler+0x1c>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	6153      	str	r3, [r2, #20]
	gp_IRQ_CallBack[1]();
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <EXTI1_IRQHandler+0x20>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	4798      	blx	r3
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010400 	.word	0x40010400
 8000858:	20000020 	.word	0x20000020

0800085c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <EXTI2_IRQHandler+0x1c>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <EXTI2_IRQHandler+0x1c>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6153      	str	r3, [r2, #20]
	gp_IRQ_CallBack[2]();
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <EXTI2_IRQHandler+0x20>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4798      	blx	r3
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40010400 	.word	0x40010400
 800087c:	20000020 	.word	0x20000020

08000880 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <EXTI3_IRQHandler+0x1c>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <EXTI3_IRQHandler+0x1c>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6153      	str	r3, [r2, #20]
	gp_IRQ_CallBack[3]();
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <EXTI3_IRQHandler+0x20>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4798      	blx	r3
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40010400 	.word	0x40010400
 80008a0:	20000020 	.word	0x20000020

080008a4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <EXTI4_IRQHandler+0x1c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <EXTI4_IRQHandler+0x1c>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6153      	str	r3, [r2, #20]
	gp_IRQ_CallBack[0]();
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <EXTI4_IRQHandler+0x20>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4798      	blx	r3
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40010400 	.word	0x40010400
 80008c4:	20000020 	.word	0x20000020

080008c8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if(EXTI->PR >>5 &1)
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d009      	beq.n	80008ee <EXTI9_5_IRQHandler+0x26>
	{
		EXTI->PR |= (1<<5);
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a26      	ldr	r2, [pc, #152]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 80008e0:	f043 0320 	orr.w	r3, r3, #32
 80008e4:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[5]();
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <EXTI9_5_IRQHandler+0xb4>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4798      	blx	r3
	else if(EXTI->PR >>9 &1)
	{
		EXTI->PR |= (1<<9);
		gp_IRQ_CallBack[9]();
	}
}
 80008ec:	e042      	b.n	8000974 <EXTI9_5_IRQHandler+0xac>
	else if(EXTI->PR >>6 &1)
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	099b      	lsrs	r3, r3, #6
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d009      	beq.n	8000910 <EXTI9_5_IRQHandler+0x48>
		EXTI->PR |= (1<<6);
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000906:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[6]();
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <EXTI9_5_IRQHandler+0xb4>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4798      	blx	r3
}
 800090e:	e031      	b.n	8000974 <EXTI9_5_IRQHandler+0xac>
	else if(EXTI->PR >>7 &1)
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	09db      	lsrs	r3, r3, #7
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d009      	beq.n	8000932 <EXTI9_5_IRQHandler+0x6a>
		EXTI->PR |= (1<<7);
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[7]();
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <EXTI9_5_IRQHandler+0xb4>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4798      	blx	r3
}
 8000930:	e020      	b.n	8000974 <EXTI9_5_IRQHandler+0xac>
	else if(EXTI->PR >>8 &1)
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d009      	beq.n	8000954 <EXTI9_5_IRQHandler+0x8c>
		EXTI->PR |= (1<<8);
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[8]();
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <EXTI9_5_IRQHandler+0xb4>)
 800094e:	6a1b      	ldr	r3, [r3, #32]
 8000950:	4798      	blx	r3
}
 8000952:	e00f      	b.n	8000974 <EXTI9_5_IRQHandler+0xac>
	else if(EXTI->PR >>9 &1)
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	0a5b      	lsrs	r3, r3, #9
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d008      	beq.n	8000974 <EXTI9_5_IRQHandler+0xac>
		EXTI->PR |= (1<<9);
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <EXTI9_5_IRQHandler+0xb0>)
 8000968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096c:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[9]();
 800096e:	4b03      	ldr	r3, [pc, #12]	; (800097c <EXTI9_5_IRQHandler+0xb4>)
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	4798      	blx	r3
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40010400 	.word	0x40010400
 800097c:	20000020 	.word	0x20000020

08000980 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	if(EXTI->PR >>10 &1)
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	0a9b      	lsrs	r3, r3, #10
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d009      	beq.n	80009a6 <EXTI15_10_IRQHandler+0x26>
	{
		EXTI->PR |= (1<<10);
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099c:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[10]();
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <EXTI15_10_IRQHandler+0xd8>)
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	4798      	blx	r3
	else if(EXTI->PR >>15 &1)
	{
		EXTI->PR |= (1<<15);
		gp_IRQ_CallBack[15]();
	}
}
 80009a4:	e053      	b.n	8000a4e <EXTI15_10_IRQHandler+0xce>
	else if(EXTI->PR >>11 &1)
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	0adb      	lsrs	r3, r3, #11
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <EXTI15_10_IRQHandler+0x48>
		EXTI->PR |= (1<<11);
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009be:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[11]();
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <EXTI15_10_IRQHandler+0xd8>)
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	4798      	blx	r3
}
 80009c6:	e042      	b.n	8000a4e <EXTI15_10_IRQHandler+0xce>
	else if(EXTI->PR >>12 &1)
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	0b1b      	lsrs	r3, r3, #12
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d009      	beq.n	80009ea <EXTI15_10_IRQHandler+0x6a>
		EXTI->PR |= (1<<12);
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e0:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[12]();
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <EXTI15_10_IRQHandler+0xd8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4798      	blx	r3
}
 80009e8:	e031      	b.n	8000a4e <EXTI15_10_IRQHandler+0xce>
	else if(EXTI->PR >>13 &1)
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	0b5b      	lsrs	r3, r3, #13
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d009      	beq.n	8000a0c <EXTI15_10_IRQHandler+0x8c>
		EXTI->PR |= (1<<13);
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 80009fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a02:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[13]();
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <EXTI15_10_IRQHandler+0xd8>)
 8000a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a08:	4798      	blx	r3
}
 8000a0a:	e020      	b.n	8000a4e <EXTI15_10_IRQHandler+0xce>
	else if(EXTI->PR >>14 &1)
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	0b9b      	lsrs	r3, r3, #14
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d009      	beq.n	8000a2e <EXTI15_10_IRQHandler+0xae>
		EXTI->PR |= (1<<14);
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[14]();
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <EXTI15_10_IRQHandler+0xd8>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a2a:	4798      	blx	r3
}
 8000a2c:	e00f      	b.n	8000a4e <EXTI15_10_IRQHandler+0xce>
	else if(EXTI->PR >>15 &1)
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	0bdb      	lsrs	r3, r3, #15
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d008      	beq.n	8000a4e <EXTI15_10_IRQHandler+0xce>
		EXTI->PR |= (1<<15);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <EXTI15_10_IRQHandler+0xd4>)
 8000a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a46:	6153      	str	r3, [r2, #20]
		gp_IRQ_CallBack[15]();
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <EXTI15_10_IRQHandler+0xd8>)
 8000a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4c:	4798      	blx	r3
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010400 	.word	0x40010400
 8000a58:	20000020 	.word	0x20000020

08000a5c <getPINPos>:

#include <gpio.h>


uint8 getPINPos(uint8 PIN_Num)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	switch(PIN_Num)
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d833      	bhi.n	8000ad4 <getPINPos+0x78>
 8000a6c:	a201      	add	r2, pc, #4	; (adr r2, 8000a74 <getPINPos+0x18>)
 8000a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a72:	bf00      	nop
 8000a74:	08000ab5 	.word	0x08000ab5
 8000a78:	08000ab9 	.word	0x08000ab9
 8000a7c:	08000abd 	.word	0x08000abd
 8000a80:	08000ac1 	.word	0x08000ac1
 8000a84:	08000ac5 	.word	0x08000ac5
 8000a88:	08000ac9 	.word	0x08000ac9
 8000a8c:	08000acd 	.word	0x08000acd
 8000a90:	08000ad1 	.word	0x08000ad1
 8000a94:	08000ab5 	.word	0x08000ab5
 8000a98:	08000ab9 	.word	0x08000ab9
 8000a9c:	08000abd 	.word	0x08000abd
 8000aa0:	08000ac1 	.word	0x08000ac1
 8000aa4:	08000ac5 	.word	0x08000ac5
 8000aa8:	08000ac9 	.word	0x08000ac9
 8000aac:	08000acd 	.word	0x08000acd
 8000ab0:	08000ad1 	.word	0x08000ad1
	{
	case 0:
	case 8:
		return 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e00e      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 1:
	case 9:
		return 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	e00c      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 2:
	case 10:
		return 8;
 8000abc:	2308      	movs	r3, #8
 8000abe:	e00a      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 3:
	case 11:
		return 12;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	e008      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 4:
	case 12:
		return 16;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	e006      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 5:
	case 13:
		return 20;
 8000ac8:	2314      	movs	r3, #20
 8000aca:	e004      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 6:
	case 14:
		return 24;
 8000acc:	2318      	movs	r3, #24
 8000ace:	e002      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	case 7:
	case 15:
		return 28;
 8000ad0:	231c      	movs	r3, #28
 8000ad2:	e000      	b.n	8000ad6 <getPINPos+0x7a>
		break;
	default:
		return -1;
 8000ad4:	23ff      	movs	r3, #255	; 0xff
		break;
	}
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <MCAL_GPIO_init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
 *
====================================================================================================*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	vuint32* configReg = (PINConfig->GPIO_PINNumber<8)?&GPIOx->CRL:&GPIOx->CRH;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b07      	cmp	r3, #7
 8000af0:	d801      	bhi.n	8000af6 <MCAL_GPIO_init+0x16>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e001      	b.n	8000afa <MCAL_GPIO_init+0x1a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3304      	adds	r3, #4
 8000afa:	60bb      	str	r3, [r7, #8]
	*configReg &= ~(0xf<<getPINPos(PINConfig->GPIO_PINNumber));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ffab 	bl	8000a5c <getPINPos>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	4093      	lsls	r3, r2
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	401a      	ands	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	601a      	str	r2, [r3, #0]
	uint8 PIN_TempConfig;
	if( (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD)||
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d00b      	beq.n	8000b3a <MCAL_GPIO_init+0x5a>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	2b05      	cmp	r3, #5
 8000b28:	d007      	beq.n	8000b3a <MCAL_GPIO_init+0x5a>
			(PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD))
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
	if( (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD)||
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d003      	beq.n	8000b3a <MCAL_GPIO_init+0x5a>
			(PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD))
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d10e      	bne.n	8000b58 <MCAL_GPIO_init+0x78>
	{
		PIN_TempConfig =  (((PINConfig->GPIO_Mode - 4) << 2) | PINConfig->GPIO_Speed) & 0X0F;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	b25a      	sxtb	r2, r3
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e037      	b.n	8000bc8 <MCAL_GPIO_init+0xe8>
	}
	else if( (PINConfig->GPIO_Mode == GPIO_Mode_Analog) || (PINConfig->GPIO_Mode == GPIO_Mode_IN_Float))
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <MCAL_GPIO_init+0x88>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	785b      	ldrb	r3, [r3, #1]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d107      	bne.n	8000b78 <MCAL_GPIO_init+0x98>
	{
		PIN_TempConfig = ( ((PINConfig->GPIO_Mode)<<2)|(0x0)) & (0xf);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	73fb      	strb	r3, [r7, #15]
 8000b76:	e027      	b.n	8000bc8 <MCAL_GPIO_init+0xe8>
	}
	else if((PINConfig->GPIO_Mode == GPIO_Mode_AF_IN))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	785b      	ldrb	r3, [r3, #1]
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d102      	bne.n	8000b86 <MCAL_GPIO_init+0xa6>
	{
		PIN_TempConfig = ( ((GPIO_Mode_IN_Float)<<2)|(0x0)) & (0xf);
 8000b80:	2304      	movs	r3, #4
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e020      	b.n	8000bc8 <MCAL_GPIO_init+0xe8>
	}
	else
	{
		PIN_TempConfig = ( ((PINConfig->GPIO_Mode)<<2)|(0x0)) & (0xf);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	73fb      	strb	r3, [r7, #15]
		if(PINConfig->GPIO_Mode == GPIO_Mode_IN_PD)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d10b      	bne.n	8000bb4 <MCAL_GPIO_init+0xd4>
			GPIOx->ODR &= ~(1<<PINConfig->GPIO_PINNumber);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	408a      	lsls	r2, r1
 8000baa:	43d2      	mvns	r2, r2
 8000bac:	401a      	ands	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	e009      	b.n	8000bc8 <MCAL_GPIO_init+0xe8>
		else
			GPIOx->ODR |= (1<<PINConfig->GPIO_PINNumber);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	408a      	lsls	r2, r1
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	60da      	str	r2, [r3, #12]
	}
	*configReg |= (PIN_TempConfig<<getPINPos(PINConfig->GPIO_PINNumber));
 8000bc8:	7bfc      	ldrb	r4, [r7, #15]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff44 	bl	8000a5c <getPINPos>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	fa04 f203 	lsl.w	r2, r4, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}

08000bec <MCAL_GPIO_WritePIN>:
 * @param [in]	-Value : PIN value cane be set      @ref GPIO_PIN_State
 * @retval 		-None
 * Note 		-None
================================================================================================*/
void MCAL_GPIO_WritePIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number,uint8 value )
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_HIGH)
 8000bfc:	78bb      	ldrb	r3, [r7, #2]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d109      	bne.n	8000c16 <MCAL_GPIO_WritePIN+0x2a>
		GPIOx->ODR |= (1<<PIN_Number);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	78fa      	ldrb	r2, [r7, #3]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]
	else
		GPIOx->ODR &= ~(1<<PIN_Number);
}
 8000c14:	e009      	b.n	8000c2a <MCAL_GPIO_WritePIN+0x3e>
		GPIOx->ODR &= ~(1<<PIN_Number);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	43d2      	mvns	r2, r2
 8000c24:	401a      	ands	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60da      	str	r2, [r3, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <MCAL_GPIO_WritePort>:
 * @param [in]	-Value : PORT value
 * @retval 		-None
 * Note 		-None
 ===================================================================================================*/
void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint16 value )
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32)value;
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60da      	str	r2, [r3, #12]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <USART1_IRQHandler>:
	}
}


void USART1_IRQHandler (void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	g_USARt_CFG[0]->USART_IRQ_CallBack();
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <USART1_IRQHandler+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	4798      	blx	r3
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000060 	.word	0x20000060

08000c64 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	g_USARt_CFG[1]->USART_IRQ_CallBack();
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	4798      	blx	r3
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000060 	.word	0x20000060

08000c78 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	g_USARt_CFG[2]->USART_IRQ_CallBack();
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <USART3_IRQHandler+0x10>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	4798      	blx	r3
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000060 	.word	0x20000060

08000c8c <clock_init>:
//}

uint8_t IRQ_Flag = 0;


void clock_init(){
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	//enable ABP2 clock register
	//enable IO port A clock
	 RCC_GPIOA_CLOCK_EN();
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <clock_init+0x30>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <clock_init+0x30>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]

	//enable IO port B clock
	 RCC_GPIOB_CLOCK_EN();
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <clock_init+0x30>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <clock_init+0x30>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6193      	str	r3, [r2, #24]
	 RCC_AFIO_CLOCK_EN();
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <clock_init+0x30>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <clock_init+0x30>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <IRQ9_CallBack>:

void IRQ9_CallBack(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	LCD_clear_screen();
 8000cc4:	f7ff fb18 	bl	80002f8 <LCD_clear_screen>
	IRQ_Flag = 1;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <IRQ9_CallBack+0x20>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("EXTI9 happened!!");
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <IRQ9_CallBack+0x24>)
 8000cd0:	f7ff fbac 	bl	800042c <LCD_WRITE_STRING>
	delay_ms(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f7ff fa4a 	bl	8000170 <delay_ms>

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000006c 	.word	0x2000006c
 8000ce4:	08000df4 	.word	0x08000df4

08000ce8 <main>:



int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
	clock_init();
 8000cee:	f7ff ffcd 	bl	8000c8c <clock_init>
	//GPIO_init();
	LCD_INIT();
 8000cf2:	f7ff fb41 	bl	8000378 <LCD_INIT>
	//Configure an External interrupt request of line 9 on PORT B pin 9
	EXTI_PinConfig_t EXTI_Config;
	EXTI_Config.EXTI_Pin = EXTI9PB9 ;
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <main+0x4c>)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Config.triggerState = triggerState_Rising;
 8000d02:	2301      	movs	r3, #1
 8000d04:	763b      	strb	r3, [r7, #24]
	EXTI_Config.ptr_IRQ_CallBack = IRQ9_CallBack;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <main+0x50>)
 8000d08:	61fb      	str	r3, [r7, #28]
	EXTI_Config.EXTI_State = EXTI_Enable;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	767b      	strb	r3, [r7, #25]
	MCAL_EXTI_Init(&EXTI_Config);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd72 	bl	80007fc <MCAL_EXTI_Init>
	IRQ_Flag = 1;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <main+0x54>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
    /* Loop forever */
	while(1){
		if (IRQ_Flag){
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <main+0x54>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0fb      	beq.n	8000d1e <main+0x36>
				LCD_clear_screen();
 8000d26:	f7ff fae7 	bl	80002f8 <LCD_clear_screen>
				IRQ_Flag = 0;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <main+0x54>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
		if (IRQ_Flag){
 8000d30:	e7f5      	b.n	8000d1e <main+0x36>
 8000d32:	bf00      	nop
 8000d34:	08000e08 	.word	0x08000e08
 8000d38:	08000cc1 	.word	0x08000cc1
 8000d3c:	2000006c 	.word	0x2000006c

08000d40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	; (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	; (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6e:	f000 f811 	bl	8000d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff ffb9 	bl	8000ce8 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   r0, =_estack
 8000d78:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d84:	08000e1c 	.word	0x08000e1c
  ldr r2, =_sbss
 8000d88:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d8c:	20000070 	.word	0x20000070

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <__libc_init_array>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	2600      	movs	r6, #0
 8000d98:	4d0c      	ldr	r5, [pc, #48]	; (8000dcc <__libc_init_array+0x38>)
 8000d9a:	4c0d      	ldr	r4, [pc, #52]	; (8000dd0 <__libc_init_array+0x3c>)
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	10a4      	asrs	r4, r4, #2
 8000da0:	42a6      	cmp	r6, r4
 8000da2:	d109      	bne.n	8000db8 <__libc_init_array+0x24>
 8000da4:	f000 f81a 	bl	8000ddc <_init>
 8000da8:	2600      	movs	r6, #0
 8000daa:	4d0a      	ldr	r5, [pc, #40]	; (8000dd4 <__libc_init_array+0x40>)
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <__libc_init_array+0x44>)
 8000dae:	1b64      	subs	r4, r4, r5
 8000db0:	10a4      	asrs	r4, r4, #2
 8000db2:	42a6      	cmp	r6, r4
 8000db4:	d105      	bne.n	8000dc2 <__libc_init_array+0x2e>
 8000db6:	bd70      	pop	{r4, r5, r6, pc}
 8000db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dbc:	4798      	blx	r3
 8000dbe:	3601      	adds	r6, #1
 8000dc0:	e7ee      	b.n	8000da0 <__libc_init_array+0xc>
 8000dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc6:	4798      	blx	r3
 8000dc8:	3601      	adds	r6, #1
 8000dca:	e7f2      	b.n	8000db2 <__libc_init_array+0x1e>
 8000dcc:	08000e14 	.word	0x08000e14
 8000dd0:	08000e14 	.word	0x08000e14
 8000dd4:	08000e14 	.word	0x08000e14
 8000dd8:	08000e18 	.word	0x08000e18

08000ddc <_init>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr

08000de8 <_fini>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr
