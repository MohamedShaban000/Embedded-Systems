/*
 * usart.c
 *
 *  Created on: May 23, 2024
 *      Author: Mohamed Shaban
 */

#include "usart.h"
#include "RCC.h"

USART_Config_t* g_USARt_CFG[3];


/*=================================================================================================
 * @Fn-           MCAL_USART_Init
 * @brief 		-Adjust the configuration for USART
 * @param [in] 	-USARTx : where x can be (1,2,3)
 * @param [in]	-USART_CFG : Pointer to USART configuration structure
 * 				 the configuration info for specified GPIO
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_USART_Init(USART_TypeDef* USARTx ,USART_Config_t* USART_CFG)
{
	//Save configuration of the required USART to be used in another functions and enable clock for the required USART
	if(USARTx == USART1)
	{
		g_USARt_CFG = USART_CFG;
		RCC_USART1_CLOCK_EN();
	}else if(USARTx == USART2)
	{
		g_USARt_CFG = USART_CFG;
		RCC_USART1_CLOCK_EN();
	}else if(USARTx == USART3)
	{
		g_USARt_CFG = USART_CFG;
		RCC_USART1_CLOCK_EN();
	}
	//Enable the required USART instance
	USARTx->CR1 |= (1<<13);
	//Adjust USART mode
	USARTx->CR1 |= USART_CFG->USART_Mode;
	//Set the payload length
	USARTx->CR1 |= USART_CFG->payload;
	//Chossing parity state
	USARTx->CR1 |= USART_CFG->parity;
	//Chossing number of stop bits
	USARTx->CR2 |= USART_CFG->stop_Bits;
	//Adjust HWFlowCtrl pins
	USARTx->CR3 |= USART_CFG->HWFlowCtrl;
	//set BR register


	//Adjust IRQ
	if(USART_CFG->USART_IRQ_Type!=USART_IRQ_None)
	{
		//Enable this type of USART interrupt and set the IRQ_CallBack pointer
		USARTx->CR1 |= USART_CFG->USART_IRQ_Type;
		//Enable NVIC for this  USART instance
		if(USARTx == USART1)
		{
			NVIC_USART1_IRQ_EN();
			g_USARt_CFG[0]->USART_IRQ_CallBack = USART_CFG->USART_IRQ_CallBack;
		}else if(USARTx == USART2)
		{
			NVIC_USART2_IRQ_EN();
			g_USARt_CFG[1]->USART_IRQ_CallBack = USART_CFG->USART_IRQ_CallBack;
		}else if(USARTx == USART3)
		{
			NVIC_USART3_IRQ_EN();
			g_USARt_CFG[2]->USART_IRQ_CallBack = USART_CFG->USART_IRQ_CallBack;
		}
	}

}



/*=================================================================================================
 * @Fn-           MCAL_USART_DeInit
 * @brief 		-Reset the chosen USART and disable IRQ interrupt line
 * @param [in] 	-USARTx : where x can be (1,2,3)
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_USART_DeInit(USART_TypeDef* USARTx )
{
	if(USARTx == USART1)
	{
		RCC->APB2RSTR |= (1<<14);
		NVIC_USART1_IRQ_Disable();
		//Disable clock for USART1
		(RCC->APB2ENR |= 1<<14);
	}
	else if(USARTx == USART2)
	{
		RCC->APB1RSTR |= (1<<17);
		NVIC_USART2_IRQ_Disable();
		//Disable clock for USART2
		(RCC->APB2ENR |= 1<<17);
	}
	else if(USARTx == USART3)
	{
		RCC->APB1RSTR |= (1<<18);
		NVIC_USART3_IRQ_Disable();
		//Disable clock for USART3
		(RCC->APB2ENR |= 1<<18);
	}
}

/*=================================================================================================
 * @Fn-           MCAL_USART_Send
 * @brief 		-Send the required data
 * @param [in] 	-USARTx : where x can be (1,2,3)
 * @param [in]	-pTX_buff : Data to be transmitted
 * @param [in]	-polling : if you want to use interrupt "disable polling"
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_USART_Send(USART_TypeDef* USARTx ,uint16* pTX_buff, polling_state polling)
{}


/*=================================================================================================
 * @Fn-           MCAL_USART_Receive
 * @brief 		-Receiveng the data
 * @param [in] 	-USARTx : where x can be (1,2,3)
 * @param [in]	-pRX_buff : the buffer to be filled with the received data
 * @param [in]	-polling : if you want to use interrupt "disable polling"
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_USART_Receive(USART_TypeDef* USARTx ,uint16* pRX_buff, polling_state polling)
{}




/*=================================================================================================
 * @Fn-           MCAL_USART_GPIO_SetPins
 * @brief 		-Adjust the pins to work as USART pins
 * @param [in] 	-USARTx : where x can be (1,2,3)
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_USART_GPIO_SetPins(USART_TypeDef* USARTx)
{}
