/*
 * gpio.h
 *
 *  Created on: May 16, 2024
 *      Author: Mohamed Shaban
 */

#ifndef GPIO_H_
#define GPIO_H_

//-----------------------------
//Includes
//-----------------------------

#include "STM32F103x6.h"


//-----------------------------------
//User type definitions (structures)
//-----------------------------------


//Configuration structure for GPIO

typedef struct {
	uint8 GPIO_PINNumber;   	//pin number of GPIO Port
								//this parameter can be a value of  @ref GPIO_Pin_define

	uint8 GPIO_Mode;			//mode of GPIO selected pins
								//this parameter can be a value of  @ref GPIO_Mode_define

	uint8 GPIO_Speed;			//GPIO PIN output speed
                             	//this parameter can be a value of  @ref GPIO_Speed_define

}GPIO_PinConfig_t;



//-----------------------------
//Macros Configuration References
//-----------------------------


//@ref GPIO_pin_define
#define GPIO_PIN0			 	((uint8)0)
#define GPIO_PIN1				((uint8)1)
#define GPIO_PIN2			 	((uint8)2)
#define GPIO_PIN3				((uint8)3)
#define GPIO_PIN4			 	((uint8)4)
#define GPIO_PIN5				((uint8)5)
#define GPIO_PIN6			 	((uint8)6)
#define GPIO_PIN7				((uint8)7)
#define GPIO_PIN8			 	((uint8)8)
#define GPIO_PIN9				((uint8)9)
#define GPIO_PIN10			 	((uint8)10)
#define GPIO_PIN11				((uint8)11)
#define GPIO_PIN12			 	((uint8)12)
#define GPIO_PIN13				((uint8)13)
#define GPIO_PIN14			 	((uint8)14)
#define GPIO_PIN15				((uint8)15)


/*@ref GPIO_Mode_define
 * 0 : Analog Mode
 * 1 : floating input (reset state)
 * 2 : Input with pull-up
 * 3 : Input with Pull-down
 * 4 : General purpose Output Push-pull
 * 5 : General purpose Output Open-drain
 * 6 : Alternate function Output Push-pull
 * 7 : Alternate function Output Open-drain
 * 8 : Alternate function Input
*/
#define GPIO_Mode_Analog				((uint8)0)
#define GPIO_Mode_IN_Float				((uint8)1)
#define GPIO_Mode_IN_PU					((uint8)2)
#define GPIO_Mode_IN_PD					((uint8)3)
#define GPIO_Mode_OUT_PP				((uint8)4)
#define GPIO_Mode_OUT_OD				((uint8)5)
#define GPIO_Mode_AF_OUT_PP				((uint8)6)
#define GPIO_Mode_AF_OUT_OD				((uint8)7)
#define GPIO_Mode_AF_IN					((uint8)8)


/*@ref GPIO_Speed_define
  1 : Output mode, max speed 10 MHz.
  2 : Output mode, max speed 2 MHz.
  3 : Output mode, max speed 50 MHz.
*/
#define GPIO_Speed_10MHZ				((uint8)1)
#define GPIO_Speed_2MHZ					((uint8)2)
#define GPIO_Speed_50MHZ				((uint8)3)

//@ref GPIO_LOCK_state
#define  GPIO_LOCK_ERROR				((uint8)0)
#define  GPIO_LOCK_Enabled				((uint8)1)

//@ref GPIO_PIN_State
#define  GPIO_PIN_HIGH					((uint8)0)
#define  GPIO_PIN_LOW					((uint8)1)


/*
* ===============================================
* APIs Supported by "MCAL GPIO DRIVER"
* ===============================================
*/

/*=================================================================================================
* @Fn-           MCAL_GPIO_init
* @brief 		-Initializes the GPIOx PINy according to the specified parameters of PinConfig
* @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
* @param [in]	-PinConfig : Pointer to GPIO_PinConfig_t which contains
* 				 the configuration info for specified GPIO
* @retval       -None
* Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
* 				 but LQFP48 Package has A,B ,Part of C&D
================================================================================================*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig);



/*=================================================================================================
* @Fn-           MCAL_GPIO_Deinit
* @brief 		-Reset the peripheral and its registers
* @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
* @retval       -None
* Note			-None
================================================================================================*/
void  MCAL_GPIO_Deinit (GPIO_TypeDef* GPIOx );



/*=================================================================================================
* @Fn-           MCAL_GPIO_ReadPIN
* @brief 		-return the value of the input pin
* @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
* @param [in]   -PIN_Number : the input pin
* @retval       -GPIO_PIN_State high or low according to @ref GPIO_PIN_State
* Note			-None
================================================================================================*/
uint8 MCAL_GPIO_ReadPIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number);



/*=================================================================================================
* @Fn-           MCAL_GPIO_ReadPort
* @brief 		-Read the input port value
* @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
* @retval       -The input port value
* Note			-None
================================================================================================*/
uint16 MCAL_GPIO_ReadPort (GPIO_TypeDef* GPIOx );


/*=================================================================================================
* @Fn			-MCAL_GPIO_WritePin
 * @brief		-Write value on specific PIN
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-PinNumber : Specific Pin number to be Write on according to @ref GPIO_PINS_Define
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
================================================================================================*/
void MCAL_GPIO_WritePIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number,uint8 value )
;

/*===================================================================================================
 * @Fn			-MCAL_GPIO_WritePort
 * @brief		-Write value on PORT
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-Value : PORT value
 * @retval 		-None
 * Note 		-None
 ===================================================================================================*/
void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint6 value );



/*===================================================================================================
 * @Fn			-MCAL_GPIO_TogglePin
 * @brief		-Toggle a specific PIN
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-PinNumber : Specific Pin number to be Toggled according to @ref GPIO_PINS_Define
 * @retval 		-None
 * Note 		-None
 ====================================================================================================*/
void  MCAL_GPIO_TogglePIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number);




/*=====================================================================================================
 * @Fn			-MCAL_GPIO_LockPin
 * @brief		-Locking allows the IO configuration to be frozen
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-PinNumber : Specific Pin number to be Locked according to @ref GPIO_PINS_Define
 * @retval 		-Ok if lock is successful , Error if not (according to @ref GPIO_LOCK_State
 * Note 		-None
 ======================================================================================================*/
uint8  MCAL_GPIO_LockPIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number);





#endif /* GPIO_H_ */
