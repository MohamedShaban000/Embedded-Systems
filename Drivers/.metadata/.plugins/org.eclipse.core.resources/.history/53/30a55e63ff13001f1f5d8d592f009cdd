/*
 * gpio.c
 *
 *  Created on: May 16, 2024
 *      Author: Mohamed Shaban
 */


#include <gpio.h>


uint8 getPINPos(uint8 PIN_Num)
{
	switch(PIN_Num)
	{
	case 0:
	case 8:
		return 0;
		break;
	case 1:
	case 9:
		return 4;
		break;
	case 2:
	case 10:
		return 8;
		break;
	case 3:
	case 11:
		return 12;
		break;
	case 4:
	case 12:
		return 16;
		break;
	case 5:
	case 13:
		return 20;
		break;
	case 6:
	case 14:
		return 24;
		break;
	case 7:
	case 15:
		return 28;
		break;
	default:
		return -1;
		break;
	}
}


/*=================================================================================================
 * @Fn-           MCAL_GPIO_init
 * @brief 		-Initializes the GPIOx PINy according to the specified parameters of PinConfig
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
 * @param [in]	-PinConfig : Pointer to GPIO_PinConfig_t which contains
 * 				 the configuration info for specified GPIO
 * @retval       -None
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
 *
====================================================================================================*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig)
{
	vuint32 configReg = (PINConfig->GPIO_PINNumber<8)?GPIOx->CRL:GPIOx->CRH;
	configReg &= ~(0xf<<getPINPos(PINConfig->GPIO_PINNumber));
	uint8 PIN_TempConfig;
	if( (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD)||
			(PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD))
	{
		PIN_TempConfig =  (((PINConfig->GPIO_Mode - 4) << 2) | PINConfig->GPIO_Speed) & 0X0F;
	}
	if( (PINConfig->GPIO_Mode == GPIO_Mode_Analog) || (PINConfig->GPIO_Mode == GPIO_Mode_IN_Float))
	{
		PIN_TempConfig = ( ((PINConfig->GPIO_Mode)<<2)|(0x0)) & (0xf);
	}
	else if((PINConfig->GPIO_Mode == GPIO_Mode_AF_IN))
	{
		PIN_TempConfig = ( ((GPIO_Mode_IN_Float)<<2)|(0x0)) & (0xf);
	}
	else
	{
		PIN_TempConfig = ( ((PINConfig->GPIO_Mode)<<2)|(0x0)) & (0xf);
		if(PINConfig->GPIO_Mode == GPIO_Mode_IN_PD)
			GPIOx->ODR &= ~(1<<PINConfig->GPIO_PINNumber);
		else
			GPIOx->ODR |= (1<<PINConfig->GPIO_PINNumber);
	}
	configReg |= (PIN_TempConfig<<getPINPos(PINConfig->GPIO_PINNumber));
}

/*=================================================================================================
 * @Fn-           MCAL_GPIO_Deinit
 * @brief 		-Reset the peripheral and its registers
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
 * @retval       -None
 * Note			-None
================================================================================================*/
void  MCAL_GPIO_Deinit (GPIO_TypeDef* GPIOx )
{
	if(GPIOx == GPIOA)
		RCC->APB2RSTR |= (1<<2);
	if(GPIOx == GPIOB)
		RCC->APB2RSTR |= (1<<3);
	if(GPIOx == GPIOC)
		RCC->APB2RSTR |= (1<<4);
	if(GPIOx == GPIOD)
		RCC->APB2RSTR |= (1<<5);
	if(GPIOx == GPIOE)
		RCC->APB2RSTR |= (1<<6);
}

/*=================================================================================================
 * @Fn-           MCAL_GPIO_ReadPIN
 * @brief 		-return the value of the input pin
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
 * @param [in]   -PIN_Number : the input pin
 * @retval       -GPIO_PIN_State high or low according to @ref GPIO_PIN_State
 * Note			-None
================================================================================================*/
uint8 MCAL_GPIO_ReadPIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number)
{
	if(GPIOx->IDR & (uint32)(1<<PIN_Number))
		return GPIO_PIN_HIGH;
	else
		return GPIO_PIN_LOW;
}

/*=================================================================================================
 * @Fn-           MCAL_GPIO_ReadPort
 * @brief 		-Read the input port value
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select GPIO peripheral
 * @retval       -The input port value
 * Note			-None
================================================================================================*/
uint16 MCAL_GPIO_ReadPort (GPIO_TypeDef* GPIOx )
{
	return (uint16)GPIOx->IDR;
}


/*=================================================================================================
 * @Fn			-MCAL_GPIO_WritePin
 * @brief		-Write value on specific PIN
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-PinNumber : Specific Pin number to be Write on according to @ref GPIO_PIN_Define
 * @param [in]	-Value : PIN value cane be set      @ref GPIO_PIN_State
 * @retval 		-None
 * Note 		-None
================================================================================================*/
void MCAL_GPIO_WritePIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number,uint8 value )
{
	if(value == GPIO_PIN_HIGH)
		GPIOx->ODR |= (1<<PIN_Number);
	else
		GPIOx->ODR &= ~(1<<PIN_Number);
}


/*===================================================================================================
 * @Fn			-MCAL_GPIO_WritePort
 * @brief		-Write value on PORT
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-Value : PORT value
 * @retval 		-None
 * Note 		-None
 ===================================================================================================*/
void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint16 value )
{
	GPIOx->ODR = (uint32)value;
}



/*===================================================================================================
 * @Fn			-MCAL_GPIO_TogglePin
 * @brief		-Toggle a specific PIN
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-PinNumber : Specific Pin number to be Toggled according to @ref GPIO_PINS_Define
 * @retval 		-None
 * Note 		-None
 ====================================================================================================*/
void  MCAL_GPIO_TogglePIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number)
{
	GPIOx->ODR^= (1<<PIN_Number);
}




/*=====================================================================================================
 * @Fn			-MCAL_GPIO_LockPin
 * @brief		-Locking allows the IO configuration to be frozen
 * @param [in] 	-GPIOx : where x can be (A..E depending on device used) to select the GPIO Peripheral
 * @param [in]	-PinNumber : Specific Pin number to be Locked according to @ref GPIO_PINS_Define
 * @retval 		-Ok if lock is successful , Error if not (according to @ref GPIO_LOCK_State
 * Note 		-None
 ======================================================================================================*/
uint8  MCAL_GPIO_LockPIN (GPIO_TypeDef* GPIOx ,uint8 PIN_Number)
{
	//	Note: During the LOCK Key Writing sequence, the value of LCK[15:0] must not change.
	//	Any error in the lock sequence will abort the lock.
	//	Bits 15:0 LCKy: Port x Lock bit y (y= 0 .. 15)
	//	These bits are read write but can only be written when the LCKK bit is 0.
	//	0: Port configuration not locked
	//	1: Port configuration locked.
	vuint32 LCKR_Temp;
	GPIOx->LCKR |= (1<<PIN_Number);

	//	Bit 16 LCKK[16]: Lock key
	//	This bit can be read anytime. It can only be modified using the Lock Key Writing Sequence.
	//	0: Port configuration lock key not active
	//	1: Port configuration lock key active. GPIOx_LCKR register is locked until the next reset.
	//	LOCK key writing sequence:
	//	Write 1
	GPIOx->LCKR |= (1<<16);
	//	Write 0
	GPIOx->LCKR &= ~(1<<16);
	//	Write 1
	GPIOx->LCKR |= (1<<16);
	//	Read 0
	LCKR_Temp = GPIOx->LCKR;
	LCKR_Temp = GPIOx->LCKR;
	//	Read 1 (this read is optional but confirms that the lock is active)
	if(LCKR_Temp & (1<<16))
		return GPIO_LOCK_Enabled;
	else
		return GPIO_LOCK_ERROR;
}

