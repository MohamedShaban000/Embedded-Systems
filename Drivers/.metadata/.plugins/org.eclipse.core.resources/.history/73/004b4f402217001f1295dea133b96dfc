/*
 * EXTI.c
 *
 *  Created on: May 19, 2024
 *      Author: Mohamed Shaban
 */

//-------------Includes-------------------
#include "EXTI.h"
//----------------------------------------


//====================
//Generic Variables
//====================
void (*gp_IRQ_CallBack[16])(void);

//====================
//Generic Macros
//====================
#define AFIO_GPIO_EXTI_Mapping(x)	( (x==GPIOA)?0:\
									  (x==GPIOB)?1:\
									  (x==GPIOC)?2:\
						              (x==GPIOD)?3:0 )

//Generic Functions

void NVIC_Enable(uint8 EXTI_LINE)
{
	switch(EXTI_LINE)
	{
	case 0:
		NVIC_EXTI0_IRQ_EN();
		break;
	case 1:
		NVIC_EXTI1_IRQ_EN();
		break;
	case 2:
		NVIC_EXTI2_IRQ_EN();
		break;
	case 3:
		NVIC_EXTI3_IRQ_EN();
		break;
	case 4:
		NVIC_EXTI4_IRQ_EN();
		break;
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_5_IRQ_EN();
		break;
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_10IRQ_EN();
		break;
	}

}

void NVIC_Disable(uint8 EXTI_LINE)
{
	switch(EXTI_LINE)
	{
	case 0:
		NVIC_EXTI0_IRQ_Disable();
		break;
	case 1:
		NVIC_EXTI1_IRQ_Disable();
		break;
	case 2:
		NVIC_EXTI2_IRQ_Disable();
		break;
	case 3:
		NVIC_EXTI3_IRQ_Disable();
		break;
	case 4:
		NVIC_EXTI4_IRQ_Disable();
		break;
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_5_IRQ_Disable();
		break;
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_10IRQ_Disable();
		break;
	}
}

void EXTI_Update(EXTI_PinConfig_t* EXTI_pinCFG)
{
	//Adjust pin to be input floating
	GPIO_PinConfig_t pinCfg;
	pinCfg.GPIO_PINNumber=EXTI_pinCFG->EXTI_Pin.pinNum;
	pinCfg.GPIO_Mode=GPIO_Mode_AF_IN;
	MCAL_GPIO_init( EXTI_pinCFG->EXTI_Pin.GPIOx,&pinCfg);
	//Mapping GPIO PIN to external interrupt line
	uint8 AFIO_reg_index = EXTI_pinCFG->EXTI_Pin.EXTI_Line/4;
	uint8 AFIO_bit_pos = 4*(EXTI_pinCFG->EXTI_Pin.EXTI_Line % 4);
	AFIO->EXTICR[AFIO_reg_index] &= ~(0XF<<AFIO_bit_pos);
	AFIO->EXTICR[AFIO_reg_index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_pinCFG->EXTI_Pin.GPIOx)<<AFIO_bit_pos);
	//Adjust the edge trigger for the interrupt
	EXTI->FTSR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	EXTI->RTSR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	if(EXTI_pinCFG->triggerState == triggerState_Falling)
	{
		EXTI->FTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	}
	else if(EXTI_pinCFG->triggerState == triggerState_Falling)
	{
		EXTI->RTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	}
	else if(EXTI_pinCFG->triggerState == triggerState_Falling)
	{
		EXTI->FTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
		EXTI->RTSR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	}
	//Put the IRQ Pointer to the application interrupt function
	gp_IRQ_CallBack[EXTI_pinCFG->EXTI_Pin.EXTI_Line_IRQ] = EXTI_pinCFG->ptr_IRQ_CallBack;
	//Enable or disable IRQ and NVIC
	if(EXTI_pinCFG->EXTI_State == EXTI_Enable)
	{
		EXTI->IMR |= (1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
		NVIC_Enable(EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	}
	else if(EXTI_pinCFG->EXTI_State == EXTI_Disable)
	{
		EXTI->IMR &= ~(1<<EXTI_pinCFG->EXTI_Pin.EXTI_Line);
		NVIC_Disable(EXTI_pinCFG->EXTI_Pin.EXTI_Line);
	}
}

/*=================================================================================================
 * @Fn-           MCAL_GPIO_init
 * @brief 		-Initializes the EXTI according to the configuration structure
 * @param [in] 	-pinCFG :pointer to the configuration structure
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_EXTI_Init(EXTI_PinConfig_t* EXTI_pinCFG)
{

}


/*=================================================================================================
 * @Fn-           MCAL_EXTI_Update
 * @brief 		-update the configuration for the required EXTI PIN
 * @param [in] 	-pinCFG : the configuration structure
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_EXTI_Update(EXTI_PinConfig_t* EXTI_pinCFG)
{}



/*=================================================================================================
 * @Fn-           MCAL_EXTI_DeInit
 * @brief 		-reset EXTI registers and  disable IRQ from NVIC
 * @retval       -None
 * Note			-None
================================================================================================*/
void MCAL_EXTI_DeInit(void)
{
	// Reset EXTI controller Registers
	EXTI->IMR   = 0x00000000 ;
	EXTI->EMR   = 0x00000000 ;
	EXTI->RTSR  = 0x00000000 ;
	EXTI->FTSR  = 0x00000000 ;
	EXTI->SWIER = 0x00000000 ;
	EXTI->PR 	= 0xFFFFFFFF ;
	//Disable NVIC IRQ EXTI lines
	NVIC_EXTI0_IRQ_Disable();
	NVIC_EXTI1_IRQ_Disable();
	NVIC_EXTI2_IRQ_Disable();
	NVIC_EXTI3_IRQ_Disable();
	NVIC_EXTI4_IRQ_Disable();
	NVIC_EXTI9_5_IRQ_Disable();
	NVIC_EXTI15_10IRQ_Disable();
}



void EXTI0_IRQHandler(void)
{
	EXTI->PR |= (1<<0);
	gp_IRQ_CallBack[0]();
}

void EXTI1_IRQHandler(void)
{
	EXTI->PR |= (1<<1);
	gp_IRQ_CallBack[1]();
}

void EXTI2_IRQHandler(void)
{
	EXTI->PR |= (1<<2);
	gp_IRQ_CallBack[2]();
}

void EXTI3_IRQHandler(void)
{
	EXTI->PR |= (1<<3);
	gp_IRQ_CallBack[3]();
}

void EXTI4_IRQHandler(void)
{
	EXTI->PR |= (1<<4);
	gp_IRQ_CallBack[0]();
}

void EXTI9_5_IRQHandler(void)
{
	if(EXTI->PR >>5 &1)
	{
		EXTI->PR |= (1<<5);
		gp_IRQ_CallBack[5]();
	}
	else if(EXTI->PR >>6 &1)
	{
		EXTI->PR |= (1<<6);
		gp_IRQ_CallBack[6]();
	}
	else if(EXTI->PR >>7 &1)
	{
		EXTI->PR |= (1<<7);
		gp_IRQ_CallBack[7]();
	}
	else if(EXTI->PR >>8 &1)
	{
		EXTI->PR |= (1<<8);
		gp_IRQ_CallBack[8]();
	}
	else if(EXTI->PR >>9 &1)
	{
		EXTI->PR |= (1<<9);
		gp_IRQ_CallBack[9]();
	}
}


void EXTI15_10_IRQHandler(void)
{
	if(EXTI->PR >>10 &1)
	{
		EXTI->PR |= (1<<10);
		gp_IRQ_CallBack[10]();
	}
	else if(EXTI->PR >>11 &1)
	{
		EXTI->PR |= (1<<11);
		gp_IRQ_CallBack[11]();
	}
	else if(EXTI->PR >>12 &1)
	{
		EXTI->PR |= (1<<12);
		gp_IRQ_CallBack[12]();
	}
	else if(EXTI->PR >>13 &1)
	{
		EXTI->PR |= (1<<13);
		gp_IRQ_CallBack[13]();
	}
	else if(EXTI->PR >>14 &1)
	{
		EXTI->PR |= (1<<14);
		gp_IRQ_CallBack[14]();
	}
	else if(EXTI->PR >>15 &1)
	{
		EXTI->PR |= (1<<15);
		gp_IRQ_CallBack[15]();
	}
}


















