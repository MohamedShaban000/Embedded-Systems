/*
 * uart.h
 *
 *  Created on: May 23, 2024
 *      Author: user
 */

#ifndef MCAL_INCLUDES_USART_H_
#define MCAL_INCLUDES_USART_H_

#include "Platform_Data_Types.h"
#include "STM32F103x6.h"

//-----------------------------
// Generic type definitions
//-----------------------------
typedef enum{
	polling_en,
	polling_disabled
}polling_state;
//-----------------------------
//User type definitions (structures)
//-----------------------------

//Configuration structure for USART
typedef struct {
	uint8 USART_Mode;   	    //Mode used of USART
								//this parameter can be a value of  @ref USART_Mode_define

	uint32 USART_BaudRate;		//Standard baud rates
								//this parameter can be a value of  @ref USART_BaudRate_define

	uint8 payload;				//Number of data bits(8/9)	Note:if the parity is on and you choose 9
															// bit8 will replace MSB of payload,but if you choose 8
														   //  bit7 will replace MSB of payload
                             	//this parameter can be a value of  @ref Payload__Length_define

	uint8 stop_Bits;     	    //Number of stop bits
								//this parameter can be a value of  @ref Stop_Bits_define

	uint8 parity;     	        //Parity state
								//this parameter can be a value of  @ref Parity_State_define

	uint8 USART_IRQ_Type;	    //Interrupts to be enabled
							    //this parameter can be a value of  @ref USART_IRQ_define

	uint8 HWFlowCtrl;	        //this parameter can be a value of  @ref HWFlowCtrl_State

	void (*USART_IRQ_CallBack)(void);	//Call back function
}USART_Config_t;

//-----------------------------
//Macros Configuration References
//-----------------------------
//@ref USART_Mode_define
#define USART_Mode_TX			uint32(1<<3)
#define USART_Mode_RX			uint32(1<<2)
#define USART_Mode_TX_RX		uint32(1<<3 | 1<<2)

//@ref USART_BaudRate_define
#define USART_BaudRate_2400				2400UL
#define USART_BaudRate_9600				9600UL
#define USART_BaudRate_19200			19200UL
#define USART_BaudRate_57600			57600UL
#define USART_BaudRate_115200			115200UL
#define USART_BaudRate_230400			230400UL
#define USART_BaudRate_460800			460800UL
#define USART_BaudRate_921600			921600UL
#define USART_BaudRate_2250000			2250000UL
#define USART_BaudRate_4500000			4500000UL

//@ref Payload__Length_define
#define Payload__Length_8			   (uint32)0
#define Payload__Length_9			   (uint32)(1<<12)

//@ref Stop_Bits_define
#define Stop_Bits_1					  	(uint32)(00<<12)
#define Stop_Bits_HALF				  	(uint32)(01<<12)
#define Stop_Bits_2					  	(uint32)(10<<12)
#define Stop_Bits_1_HALF			    (uint32)(11<<12)

//@ref Parity_State_define
#define Parity_State_None		      uint32(00<<9)
#define Parity_State_Even		      uint32(10<<9)
#define Parity_State_Odd		      uint32(11<<9)

//@ref HWFlowCtrl_State
#define HWFlowCtrl_Disabled				 uint32(0)
#define HWFlowCtrl_CTS_En				 uint32(1<<9)
#define HWFlowCtrl_RTS_En				 uint32(1<<8)
#define HWFlowCtrl_CTS_RTS_En			 uint32(1<<8 | 1<<9)


//@ref USART_IRQ_define
#define USART_IRQ_None				  (uint32)0
#define USART_IRQ_RXNE				  (uint32)(1<<5)
#define USART_IRQ_TC				  (uint32)(1<<6)
#define USART_IRQ_TXE				  (uint32)(1<<7)
#define USART_IRQ_PE				  (uint32)(1<<8)


/* ===============================================
* APIs Supported by "MCAL USART DRIVER"
* ================================================*/


/*=================================================================================================
* @Fn-           MCAL_USART_Init
* @brief 		-Adjust the configuration for USART
* @param [in] 	-USARTx : where x can be (1,2,3)
* @param [in]	-USART_CFG : Pointer to USART configuration structure
* 				 the configuration info for specified GPIO
* @retval       -None
* Note			-None
================================================================================================*/
void MCAL_USART_Init(USART_TypeDef* USARTx ,USART_Config_t* USART_CFG);



/*=================================================================================================
* @Fn-           MCAL_USART_DeInit
* @brief 		-Reset the chosen USART and disable IRQ interrupt line
* @param [in] 	-USARTx : where x can be (1,2,3)
* @retval       -None
* Note			-None
================================================================================================*/
void MCAL_USART_DeInit(USART_TypeDef* USARTx );

/*=================================================================================================
* @Fn-           MCAL_USART_Send
* @brief 		-Send the required data
* @param [in] 	-USARTx : where x can be (1,2,3)
* @param [in]	-pTX_buff : Data to be transmitted
* @param [in]	-polling : if you want to use interrupt "disable polling"
* @retval       -None
* Note			-None
================================================================================================*/
void MCAL_USART_Send(USART_TypeDef* USARTx ,uint16 pTX_buff, polling_state polling);


/*=================================================================================================
* @Fn-           MCAL_USART_Receive
* @brief 		-Receiveng the data
* @param [in] 	-USARTx : where x can be (1,2,3)
* @param [in]	-pRX_buff : the buffer to be filled with the received data
* @param [in]	-polling : if you want to use interrupt "disable polling"
* @retval       -None
* Note			-None
================================================================================================*/
void MCAL_USART_Receive(USART_TypeDef* USARTx ,uint16* pRX_buff, polling_state polling);




/*=================================================================================================
* @Fn-           MCAL_USART_GPIO_SetPins
* @brief 		-Adjust the pins to work as USART pins
* @param [in] 	-USARTx : where x can be (1,2,3)
* @retval       -None
* Note			-None
================================================================================================*/
void MCAL_USART_GPIO_SetPins(USART_TypeDef* USARTx);

//===============================================================================================================

//BRR Calculations
#define USART_DIV( _PCLCK_ , _BR_ )							(uint32)(_PCLCK_/(16*_BR_))
#define USART_DIV_MUL100( _PCLCK_ , _BR_ )					(uint32)((25*_PCLCK_)/(4*_BR_))
#define USART_DIV_MANTISSA_MUL100( _PCLCK_ , _BR_ )			(uint32)(USART_DIV( _PCLCK_ , _BR_ )*100)
#define USART_DIV_MANTISSA( _PCLCK_ , _BR_ )				(uint32)(USART_DIV( _PCLCK_ , _BR_ ))
#define USART_DIV_FRACTION( _PCLCK_ , _BR_ )				(uint32)( ((USART_DIV_MUL100( _PCLCK_ , _BR_ ) - USART_DIV_MANTISSA_MUL100( _PCLCK_ , _BR_ ) )*16) /100)
#define USART_BRR(_PCLCK_ , _BR_)							(uint32)( (USART_DIV_MANTISSA(_PCLCK_ , _BR_)<<4) | (USART_DIV_FRACTION( _PCLCK_ , _BR_ )&0xf))

#endif /* MCAL_INCLUDES_USART_H_ */
